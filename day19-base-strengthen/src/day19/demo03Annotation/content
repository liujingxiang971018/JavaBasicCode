注解
概念：
    注释：用文字描述程序，给程序员看
    注解：说明程序的，给计算机看  @注解名称

JDK预定义的注解
@override
@Deprecated:将该注解的内存，表示已过时
@SuppressWarnings：压制警告,需要传参all  @SuppressWarnings("all")

自定义注解
    格式：
        元注解
        public @interface 注解名称{}
    本质：注解的本质就是一个接口，该接口默认继承Annotation接口
    属性：接口中可以定义的成员方法
        要求：
            1、属性的返回值类型
                基本数据类型
                String
                枚举型
                注解
                以上类型的数组
            2、定义了属性，在使用时就需要对其赋值
                1、如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值
                2、如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可
                3、数组赋值时，值使用{}包裹，如果数组只有一个值，则{}省略
    元注解：用于描述注解的注解
        @Target:描述注解能够作用的位置（枚举）
            TYPE：只能作用于类上
            METHOD：只能作用于方法上
            FIELD：只能作用于变量上
        @Retention:描述注解被保留的阶段（枚举）
            SOURCE：源码
            CLASS：字节码
            RUNTIME：运行时。常用
        @Documented：描述注解是否被抽取到api文档中
            添加，则会在api文档中保存
        @Inherited：描述注解是否被子类继承
            添加，则注解会被继承的子类继承
在程序使用（解析）注解
    1、获取注解定义位置的对象 （Class，Method，Field）
    2、获取指定的注解
        getAnnotation（Class）
    3、调用注解中的抽象方法获取配置的属性值

小结：
    1、以后大多数时候，我们会使用注解，而不是自定义注解
    2、注解给谁用：
        1、编译器
        2、给解析程序用
    3、注解不是程序的一部分

